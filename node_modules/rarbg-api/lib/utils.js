'use strict';

var https = require('https');
var parseUrl = require('url').parse;
var querystring = require('querystring');
var baseUrl = require('./constants').BASE_URL;
var UA = require('./constants').UA;
var APP_ID = require('./constants').APP_ID;

var debug = {};
var ENV = process.env.NODE_ENV;
Object.keys(console).forEach(function (method) {
  debug[method] = function () {
    if (ENV === 'debug' || ENV === 'test') {
      var args = [new Date()].concat([].slice.call(arguments));
      console[method].apply(console, args);
    }
  };
});

function sleep(second) {
  second = second || 1;
  return new Promise(function (resolve) {
    setTimeout(function () {
      resolve();
    }, second * 1000);
  });
}

var token = function () {
  var currentToken = '';
  return {
    get: function get() {
      return currentToken;
    },
    set: function set(newToken) {
      currentToken = newToken;
      return currentToken;
    }
  };
}();

function r(url, options) {
  return new Promise(function (resolve, reject) {
    var qs = options ? '?' + querystring.stringify(options) : '';
    var finalUrl = '' + url + qs;
    debug.log('request url: ' + finalUrl);
    var requestOptions = {
      headers: {
        'User-Agent': UA
      }
    };
    if (process.env.LOCAL_ADDRESS) requestOptions.localAddress = process.env.LOCAL_ADDRESS;
    var req = https.request(Object.assign(parseUrl(finalUrl), requestOptions), function (res) {
      var body = '';
      res.on('data', function (chunk) {
        body += chunk;
      });
      res.on('end', function () {
        try {
          body = JSON.parse(body);
        } catch (e) {
          debug.error('request error: ' + e);
        }
        resolve({
          status: res.statusCode,
          headers: res.headers,
          body: body
        });
      });
    });

    req.on('error', function (err) {
      debug.error('request failed: ' + err);
      reject(err);
    });
    req.end();
  });
}

function getToken() {
  return r(baseUrl, {
    get_token: 'get_token',
    app_id: APP_ID
  }).then(function (res) {
    return token.set(res.body.token);
  });
}

function request(url, options) {
  return Promise.resolve(token.get() || getToken()).then(function (currentToken) {
    options = options || {};
    options.token = currentToken;
    return r(url, options);
  }).then(function (res) {
    if (res.body && res.body.error) {
      if (res.body.error_code == 4) {
        // token expired
        debug.warn('token expired: ' + token.get());
        token.set(null);
        return request(url, options);
      } else if (res.body.error_code == 5) {
        // Too many requests per second
        debug.warn('too many request');
        return sleep(2).then(function () {
          return request(url, options);
        });
      }
      return res;
    } else if (!res.body) {
      // Too many requests per second
      debug.warn('too many request');
      return sleep(2).then(function () {
        return request(url, options);
      });
    } else {
      return res;
    }
  });
}

function proceedExtraParams(params) {
  params = params || {};
  var defaultParams = {
    category: null,
    limit: 25,
    sort: 'last',
    min_seeders: null,
    min_leechers: null,
    format: 'json_extended',
    ranked: null,
    app_id: APP_ID
  };

  var result = {};
  Object.keys(defaultParams).forEach(function (key) {
    var value = params[key] || defaultParams[key];
    if (!value) return;
    result[key] = value;
  });

  if (result.category) {
    result.category = result.category.join(';');
  }

  if (!~[25, 50, 100].indexOf(result.limit)) {
    result.limit = 25;
  }

  if (!~['last', 'seeders', 'leechers'].indexOf(result.sort)) {
    result.sort = 'last';
  }

  if (typeof result.min_leechers !== 'number') {
    delete result.min_leechers;
  }

  if (typeof result.min_seeders !== 'number') {
    delete result.min_seeders;
  }

  if (!~['json', 'json_extended'].indexOf(result.format)) {
    result.format = 'json_extended';
  }

  if (result.ranked != 0) {
    delete result.ranked;
  }

  return result;
}

module.exports = {
  request: request,
  proceedExtraParams: proceedExtraParams
};